// Signature format: 3.0
package com.mapbox.maps.plugin.gestures {

  public final class GesturesConstantsKt {
  }

  public final class GesturesPluginImplKt {
  }

  public final class GesturesUtils {
    method public static void addOnFlingListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnFlingListener onFlingListener);
    method public static void addOnMapClickListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnMapClickListener onMapClickListener);
    method public static void addOnMapLongClickListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnMapLongClickListener onMapLongClickListener);
    method public static void addOnMoveListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnMoveListener listener);
    method public static void addOnRotateListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnRotateListener listener);
    method public static void addOnScaleListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnScaleListener listener);
    method public static void addOnShoveListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnShoveListener listener);
    method public static com.mapbox.maps.plugin.gestures.GesturesPlugin getGestures(com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate);
    method public static com.mapbox.android.gestures.AndroidGesturesManager? getGesturesManager(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate);
    method public static boolean isScrollHorizontallyLimited(com.mapbox.maps.plugin.gestures.generated.GesturesSettings);
    method public static boolean isScrollVerticallyLimited(com.mapbox.maps.plugin.gestures.generated.GesturesSettings);
    method public static void removeOnFlingListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnFlingListener onFlingListener);
    method public static void removeOnMapClickListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnMapClickListener onMapClickListener);
    method public static void removeOnMapLongClickListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnMapLongClickListener onMapLongClickListener);
    method public static void removeOnMoveListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnMoveListener listener);
    method public static void removeOnRotateListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnRotateListener listener);
    method public static void removeOnScaleListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnScaleListener listener);
    method public static void removeOnShoveListener(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.maps.plugin.gestures.OnShoveListener listener);
    method public static void setGesturesManager(com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate, com.mapbox.android.gestures.AndroidGesturesManager androidGesturesManager, boolean attachDefaultListeners, boolean setDefaultMutuallyExclusives);
  }

}

