// Signature format: 3.0
package com.mapbox.maps {

  public interface MapControllable extends com.mapbox.maps.MapboxLifecycleObserver {
    method public void addRendererSetupErrorListener(com.mapbox.maps.renderer.RendererSetupErrorListener rendererSetupErrorListener);
    method @com.mapbox.maps.MapboxExperimental public void addWidget(com.mapbox.maps.renderer.widget.Widget widget);
    method public com.mapbox.maps.MapboxMap getMapboxMap();
    method public boolean onGenericMotionEvent(android.view.MotionEvent event);
    method public void onSizeChanged(int w, int h);
    method public boolean onTouchEvent(android.view.MotionEvent event);
    method public void queueEvent(Runnable event, boolean needRender = true);
    method public void removeRendererSetupErrorListener(com.mapbox.maps.renderer.RendererSetupErrorListener rendererSetupErrorListener);
    method @com.mapbox.maps.MapboxExperimental public boolean removeWidget(com.mapbox.maps.renderer.widget.Widget widget);
    method public void setMaximumFps(int fps);
    method public void setOnFpsChangedListener(com.mapbox.maps.renderer.OnFpsChangedListener listener);
    method public android.graphics.Bitmap? snapshot();
    method public void snapshot(com.mapbox.maps.MapView.OnSnapshotReady listener);
  }

  public final class MapInitOptions {
    ctor public MapInitOptions(android.content.Context context, com.mapbox.maps.MapOptions mapOptions = getDefaultMapOptions(context), java.util.List<? extends com.mapbox.maps.plugin.Plugin> plugins = defaultPluginList, com.mapbox.maps.CameraOptions? cameraOptions = null, boolean textureView = false, String? styleUri = "mapbox://styles/mapbox/standard-beta", android.util.AttributeSet? attrs = null, int antialiasingSampleCount = 1);
    ctor public MapInitOptions(android.content.Context context, com.mapbox.maps.MapOptions mapOptions = getDefaultMapOptions(context), java.util.List<? extends com.mapbox.maps.plugin.Plugin> plugins = defaultPluginList, com.mapbox.maps.CameraOptions? cameraOptions = null, boolean textureView = false, String? styleUri = "mapbox://styles/mapbox/standard-beta", android.util.AttributeSet? attrs = null);
    ctor public MapInitOptions(android.content.Context context, com.mapbox.maps.MapOptions mapOptions = getDefaultMapOptions(context), java.util.List<? extends com.mapbox.maps.plugin.Plugin> plugins = defaultPluginList, com.mapbox.maps.CameraOptions? cameraOptions = null, boolean textureView = false, String? styleUri = "mapbox://styles/mapbox/standard-beta");
    ctor public MapInitOptions(android.content.Context context, com.mapbox.maps.MapOptions mapOptions = getDefaultMapOptions(context), java.util.List<? extends com.mapbox.maps.plugin.Plugin> plugins = defaultPluginList, com.mapbox.maps.CameraOptions? cameraOptions = null, boolean textureView = false);
    ctor public MapInitOptions(android.content.Context context, com.mapbox.maps.MapOptions mapOptions = getDefaultMapOptions(context), java.util.List<? extends com.mapbox.maps.plugin.Plugin> plugins = defaultPluginList, com.mapbox.maps.CameraOptions? cameraOptions = null);
    ctor public MapInitOptions(android.content.Context context, com.mapbox.maps.MapOptions mapOptions = getDefaultMapOptions(context), java.util.List<? extends com.mapbox.maps.plugin.Plugin> plugins = defaultPluginList);
    ctor public MapInitOptions(android.content.Context context, com.mapbox.maps.MapOptions mapOptions = getDefaultMapOptions(context));
    ctor public MapInitOptions(android.content.Context context);
    method public android.content.Context component1();
    method public com.mapbox.maps.MapOptions component2();
    method public java.util.List<com.mapbox.maps.plugin.Plugin> component3();
    method public com.mapbox.maps.CameraOptions? component4();
    method public boolean component5();
    method public String? component6();
    method public android.util.AttributeSet? component7();
    method public int component8();
    method public com.mapbox.maps.MapInitOptions copy(android.content.Context context, com.mapbox.maps.MapOptions mapOptions, java.util.List<? extends com.mapbox.maps.plugin.Plugin> plugins, com.mapbox.maps.CameraOptions? cameraOptions, boolean textureView, String? styleUri, android.util.AttributeSet? attrs, int antialiasingSampleCount);
    method public int getAntialiasingSampleCount();
    method public android.util.AttributeSet? getAttrs();
    method public com.mapbox.maps.CameraOptions? getCameraOptions();
    method public android.content.Context getContext();
    method public com.mapbox.maps.MapOptions getMapOptions();
    method public java.util.List<com.mapbox.maps.plugin.Plugin> getPlugins();
    method public String? getStyleUri();
    method public boolean getTextureView();
    method public void setAntialiasingSampleCount(int);
    method public void setAttrs(android.util.AttributeSet?);
    method public void setCameraOptions(com.mapbox.maps.CameraOptions?);
    method public void setMapOptions(com.mapbox.maps.MapOptions);
    method public void setPlugins(java.util.List<? extends com.mapbox.maps.plugin.Plugin>);
    method public void setTextureView(boolean);
    property public final int antialiasingSampleCount;
    property public final android.util.AttributeSet? attrs;
    property public final com.mapbox.maps.CameraOptions? cameraOptions;
    property public final android.content.Context context;
    property public final com.mapbox.maps.MapOptions mapOptions;
    property public final java.util.List<com.mapbox.maps.plugin.Plugin> plugins;
    property public final String? styleUri;
    property public final boolean textureView;
    field public static final com.mapbox.maps.MapInitOptions.Companion Companion;
  }

  public static final class MapInitOptions.Companion {
    method public com.mapbox.maps.MapOptions getDefaultMapOptions(android.content.Context context);
    method public java.util.List<com.mapbox.maps.plugin.Plugin> getDefaultPluginList();
    property public final java.util.List<com.mapbox.maps.plugin.Plugin> defaultPluginList;
  }

  public final class MapInitOptionsKt {
    method public static com.mapbox.maps.MapOptions.Builder applyDefaultParams(com.mapbox.maps.MapOptions.Builder, android.content.Context context);
  }

  public abstract class MapSnapshotResult {
    method public abstract java.util.List<java.lang.String> attributions();
    method public abstract android.graphics.Bitmap bitmap();
    method public abstract com.mapbox.geojson.Point coordinate(com.mapbox.maps.ScreenCoordinate screenCoordinate);
    method public abstract com.mapbox.maps.ScreenCoordinate screenCoordinate(com.mapbox.geojson.Point coordinate);
  }

  public final class MapSurface implements com.mapbox.maps.MapControllable com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate {
    ctor public MapSurface(android.content.Context context, android.view.Surface surface, com.mapbox.maps.MapInitOptions mapInitOptions = com.mapbox.maps.MapInitOptions(context));
    ctor public MapSurface(android.content.Context context, android.view.Surface surface);
    method public void addRendererSetupErrorListener(com.mapbox.maps.renderer.RendererSetupErrorListener rendererSetupErrorListener);
    method @com.mapbox.maps.MapboxExperimental public void addWidget(com.mapbox.maps.renderer.widget.Widget widget);
    method public com.mapbox.maps.MapboxMap getMapboxMap();
    method public <T extends com.mapbox.maps.plugin.MapPlugin> T? getPlugin(String id);
    method public android.view.Surface getSurface();
    method public void onDestroy();
    method public boolean onGenericMotionEvent(android.view.MotionEvent event);
    method public void onLowMemory();
    method public void onSizeChanged(int w, int h);
    method public void onStart();
    method public void onStop();
    method public boolean onTouchEvent(android.view.MotionEvent event);
    method public void queueEvent(Runnable event, boolean needRender);
    method public void removeRendererSetupErrorListener(com.mapbox.maps.renderer.RendererSetupErrorListener rendererSetupErrorListener);
    method @com.mapbox.maps.MapboxExperimental public boolean removeWidget(com.mapbox.maps.renderer.widget.Widget widget);
    method public void setMaximumFps(int fps);
    method public void setOnFpsChangedListener(com.mapbox.maps.renderer.OnFpsChangedListener listener);
    method public android.graphics.Bitmap? snapshot();
    method public void snapshot(com.mapbox.maps.MapView.OnSnapshotReady listener);
    method public void surfaceChanged(int width, int height);
    method public void surfaceCreated();
    method public void surfaceDestroyed();
    property public final android.view.Surface surface;
  }

  public class MapView extends android.widget.FrameLayout implements com.mapbox.maps.MapControllable com.mapbox.maps.plugin.delegates.MapPluginProviderDelegate {
    ctor public MapView(android.content.Context context, com.mapbox.maps.MapInitOptions mapInitOptions = com.mapbox.maps.MapInitOptions(context));
    ctor public MapView(android.content.Context context);
    ctor public MapView(android.content.Context context, android.util.AttributeSet? attrs);
    ctor public MapView(android.content.Context context, android.util.AttributeSet? attrs, int defStyleAttr);
    method public void addRendererSetupErrorListener(com.mapbox.maps.renderer.RendererSetupErrorListener rendererSetupErrorListener);
    method @com.mapbox.maps.MapboxExperimental public void addWidget(com.mapbox.maps.renderer.widget.Widget widget);
    method public final void createPlugin(com.mapbox.maps.plugin.Plugin plugin);
    method public com.mapbox.maps.MapboxMap getMapboxMap();
    method public <T extends com.mapbox.maps.plugin.MapPlugin> T? getPlugin(String id);
    method public final com.mapbox.maps.viewannotation.ViewAnnotationManager getViewAnnotationManager();
    method public static final boolean isRenderingSupported();
    method public static final boolean isTerrainRenderingSupported();
    method public void onDestroy();
    method public void onLowMemory();
    method public void onSizeChanged(int w, int h, int oldw, int oldh);
    method public void onSizeChanged(int w, int h);
    method public void onStart();
    method public void onStop();
    method public void queueEvent(Runnable event, boolean needRender);
    method public void removeRendererSetupErrorListener(com.mapbox.maps.renderer.RendererSetupErrorListener rendererSetupErrorListener);
    method @com.mapbox.maps.MapboxExperimental public boolean removeWidget(com.mapbox.maps.renderer.widget.Widget widget);
    method public void setMaximumFps(@IntRange(from=1L, to=kotlin.jvm.internal.IntCompanionObject.MAX_VALUE.toLong()) int fps);
    method public void setOnFpsChangedListener(com.mapbox.maps.renderer.OnFpsChangedListener listener);
    method public android.graphics.Bitmap? snapshot();
    method public void snapshot(com.mapbox.maps.MapView.OnSnapshotReady listener);
    property public final com.mapbox.maps.viewannotation.ViewAnnotationManager viewAnnotationManager;
    field public static final com.mapbox.maps.MapView.Companion Companion;
  }

  public static final class MapView.Companion {
    method public boolean isRenderingSupported();
    method public boolean isTerrainRenderingSupported();
  }

  public static fun interface MapView.OnSnapshotReady {
    method public void onSnapshotReady(android.graphics.Bitmap? bitmap);
  }

  public final class MapboxConfigurationException extends java.lang.RuntimeException {
    ctor public MapboxConfigurationException();
    ctor public MapboxConfigurationException(String message);
  }

  public final class MapboxConstants {
    method public static java.util.Locale getMAPBOX_LOCALE();
    property public static final java.util.Locale MAPBOX_LOCALE;
  }

  public final class MapboxMap implements com.mapbox.maps.plugin.delegates.MapCameraManagerDelegate com.mapbox.maps.plugin.delegates.MapFeatureQueryDelegate com.mapbox.maps.plugin.delegates.MapListenerDelegate com.mapbox.maps.plugin.delegates.MapPluginExtensionsDelegate com.mapbox.maps.plugin.delegates.MapProjectionDelegate com.mapbox.maps.plugin.delegates.MapTransformDelegate {
    method @Deprecated public void addOnCameraChangeListener(com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener onCameraChangeListener);
    method @Deprecated public void addOnMapIdleListener(com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener onMapIdleListener);
    method @Deprecated public void addOnMapLoadErrorListener(com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener onMapLoadErrorListener);
    method @Deprecated public void addOnMapLoadedListener(com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener onMapLoadedListener);
    method @Deprecated public void addOnRenderFrameFinishedListener(com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener onRenderFrameFinishedListener);
    method @Deprecated public void addOnRenderFrameStartedListener(com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener onRenderFrameStartedListener);
    method @Deprecated public void addOnSourceAddedListener(com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener onSourceAddedListener);
    method @Deprecated public void addOnSourceDataLoadedListener(com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener onSourceDataLoadedListener);
    method @Deprecated public void addOnSourceRemovedListener(com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener onSourceRemovedListener);
    method @Deprecated public void addOnStyleDataLoadedListener(com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener onStyleDataLoadedListener);
    method @Deprecated public void addOnStyleImageMissingListener(com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener onStyleImageMissingListener);
    method @Deprecated public void addOnStyleImageUnusedListener(com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener onStyleImageUnusedListener);
    method @Deprecated public void addOnStyleLoadedListener(com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener onStyleLoadedListener);
    method @com.mapbox.maps.MapboxExperimental public void addStyleModel(String modelId, String modelUri);
    method public Object? cameraAnimationsPlugin(kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.animation.CameraAnimationsPlugin,?> function);
    method public com.mapbox.maps.CameraOptions cameraForCoordinateBounds(com.mapbox.maps.CoordinateBounds bounds, com.mapbox.maps.EdgeInsets? padding, Double? bearing, Double? pitch);
    method public com.mapbox.maps.CameraOptions cameraForCoordinates(java.util.List<com.mapbox.geojson.Point> coordinates, com.mapbox.maps.EdgeInsets? padding, Double? bearing, Double? pitch);
    method public com.mapbox.maps.CameraOptions cameraForCoordinates(java.util.List<com.mapbox.geojson.Point> coordinates, com.mapbox.maps.CameraOptions camera, com.mapbox.maps.ScreenBox box);
    method public com.mapbox.maps.CameraOptions cameraForGeometry(com.mapbox.geojson.Geometry geometry, com.mapbox.maps.EdgeInsets? padding, Double? bearing, Double? pitch);
    method public static void clearData(com.mapbox.maps.AsyncOperationResultCallback callback);
    method public com.mapbox.maps.CoordinateBounds coordinateBoundsForCamera(com.mapbox.maps.CameraOptions camera);
    method public com.mapbox.maps.CoordinateBounds coordinateBoundsForCameraUnwrapped(com.mapbox.maps.CameraOptions camera);
    method public com.mapbox.maps.CoordinateBoundsZoom coordinateBoundsZoomForCamera(com.mapbox.maps.CameraOptions camera);
    method public com.mapbox.maps.CoordinateBoundsZoom coordinateBoundsZoomForCameraUnwrapped(com.mapbox.maps.CameraOptions camera);
    method public com.mapbox.geojson.Point coordinateForPixel(com.mapbox.maps.ScreenCoordinate pixel);
    method public com.mapbox.geojson.Point coordinateForProjectedMeters(com.mapbox.maps.ProjectedMeters projectedMeters);
    method public java.util.List<com.mapbox.geojson.Point> coordinatesForPixels(java.util.List<com.mapbox.maps.ScreenCoordinate> pixels);
    method public java.util.List<com.mapbox.geojson.Point> coordinatesForRect(android.graphics.RectF rectF);
    method public void dragEnd();
    method public void dragStart(com.mapbox.maps.ScreenCoordinate point);
    method public void executeOnRenderThread(Runnable runnable);
    method public Object? gesturesPlugin(kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.gestures.GesturesPlugin,?> function);
    method public com.mapbox.maps.CameraBounds getBounds();
    method public com.mapbox.maps.CameraState getCameraState();
    method public java.util.List<com.mapbox.maps.MapDebugOptions> getDebug();
    method public com.mapbox.maps.CameraOptions getDragCameraOptions(com.mapbox.maps.ScreenCoordinate fromPoint, com.mapbox.maps.ScreenCoordinate toPoint);
    method public Double? getElevation(com.mapbox.geojson.Point coordinate);
    method public com.mapbox.common.Cancelable getFeatureState(String sourceId, String? sourceLayerId = null, String featureId, com.mapbox.maps.QueryFeatureStateCallback callback);
    method public com.mapbox.common.Cancelable getFeatureState(String sourceId, String featureId, com.mapbox.maps.QueryFeatureStateCallback callback);
    method public com.mapbox.maps.FreeCameraOptions getFreeCameraOptions();
    method public com.mapbox.common.Cancelable getGeoJsonClusterChildren(String sourceIdentifier, com.mapbox.geojson.Feature cluster, com.mapbox.maps.QueryFeatureExtensionCallback callback);
    method public com.mapbox.common.Cancelable getGeoJsonClusterExpansionZoom(String sourceIdentifier, com.mapbox.geojson.Feature cluster, com.mapbox.maps.QueryFeatureExtensionCallback callback);
    method public com.mapbox.common.Cancelable getGeoJsonClusterLeaves(String sourceIdentifier, com.mapbox.geojson.Feature cluster, long limit = 10L, long offset = 0L, com.mapbox.maps.QueryFeatureExtensionCallback callback);
    method public com.mapbox.common.Cancelable getGeoJsonClusterLeaves(String sourceIdentifier, com.mapbox.geojson.Feature cluster, long limit = 10L, com.mapbox.maps.QueryFeatureExtensionCallback callback);
    method public com.mapbox.common.Cancelable getGeoJsonClusterLeaves(String sourceIdentifier, com.mapbox.geojson.Feature cluster, com.mapbox.maps.QueryFeatureExtensionCallback callback);
    method public com.mapbox.maps.MapOptions getMapOptions();
    method public double getMetersPerPixelAtLatitude(double latitude, double zoom);
    method public double getMetersPerPixelAtLatitude(double latitude);
    method public byte getPrefetchZoomDelta();
    method public boolean getRenderWorldCopies();
    method public com.mapbox.maps.Size getSize();
    method public void getStyle(com.mapbox.maps.Style.OnStyleLoaded onStyleLoaded);
    method public com.mapbox.maps.Style? getStyle();
    method @com.mapbox.maps.MapboxExperimental public boolean hasStyleModel(String modelId);
    method public boolean isGestureInProgress();
    method public boolean isUserAnimationInProgress();
    method public boolean isValid();
    method public void loadStyle(String style, com.mapbox.maps.Style.OnStyleLoaded? onStyleLoaded = null);
    method public void loadStyle(String style);
    method public void loadStyle(com.mapbox.maps.extension.style.StyleContract.StyleExtension styleExtension, com.mapbox.maps.Style.OnStyleLoaded? onStyleLoaded = null);
    method public void loadStyle(com.mapbox.maps.extension.style.StyleContract.StyleExtension styleExtension);
    method @Deprecated public void loadStyle(com.mapbox.maps.extension.style.StyleContract.StyleExtension styleExtension, com.mapbox.maps.TransitionOptions? styleTransitionOptions = null, com.mapbox.maps.Style.OnStyleLoaded? onStyleLoaded = null, com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener? onMapLoadErrorListener = null);
    method @Deprecated public void loadStyle(com.mapbox.maps.extension.style.StyleContract.StyleExtension styleExtension, com.mapbox.maps.Style.OnStyleLoaded? onStyleLoaded = null, com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener? onMapLoadErrorListener = null);
    method @Deprecated public void loadStyleJson(String styleJson, com.mapbox.maps.TransitionOptions? styleTransitionOptions = null, com.mapbox.maps.Style.OnStyleLoaded? onStyleLoaded = null, com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener? onMapLoadErrorListener = null);
    method @Deprecated public void loadStyleJson(String styleJson, com.mapbox.maps.Style.OnStyleLoaded? onStyleLoaded = null, com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener? onMapLoadErrorListener = null);
    method @Deprecated public void loadStyleJson(String styleJson, com.mapbox.maps.Style.OnStyleLoaded onStyleLoaded);
    method @Deprecated public void loadStyleJson(String styleJson);
    method @Deprecated public void loadStyleUri(String styleUri, com.mapbox.maps.TransitionOptions? styleTransitionOptions = null, com.mapbox.maps.Style.OnStyleLoaded? onStyleLoaded = null, com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener? onMapLoadErrorListener = null);
    method @Deprecated public void loadStyleUri(String styleUri, com.mapbox.maps.Style.OnStyleLoaded? onStyleLoaded = null, com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener? onMapLoadErrorListener = null);
    method @Deprecated public void loadStyleUri(String styleUri, com.mapbox.maps.Style.OnStyleLoaded onStyleLoaded);
    method @Deprecated public void loadStyleUri(String styleUri);
    method public com.mapbox.maps.ScreenCoordinate pixelForCoordinate(com.mapbox.geojson.Point coordinate);
    method public java.util.List<com.mapbox.maps.ScreenCoordinate> pixelsForCoordinates(java.util.List<com.mapbox.geojson.Point> coordinates);
    method public com.mapbox.maps.MercatorCoordinate project(com.mapbox.geojson.Point point, double zoomScale);
    method public com.mapbox.maps.ProjectedMeters projectedMetersForCoordinate(com.mapbox.geojson.Point point);
    method public com.mapbox.common.Cancelable queryRenderedFeatures(com.mapbox.maps.RenderedQueryGeometry geometry, com.mapbox.maps.RenderedQueryOptions options, com.mapbox.maps.QueryRenderedFeaturesCallback callback);
    method public com.mapbox.common.Cancelable querySourceFeatures(String sourceId, com.mapbox.maps.SourceQueryOptions options, com.mapbox.maps.QuerySourceFeaturesCallback callback);
    method public void reduceMemoryUse();
    method public com.mapbox.common.Cancelable removeFeatureState(String sourceId, String? sourceLayerId = null, String featureId, String? stateKey = null, com.mapbox.maps.FeatureStateOperationCallback callback);
    method public com.mapbox.common.Cancelable removeFeatureState(String sourceId, String? sourceLayerId = null, String featureId, com.mapbox.maps.FeatureStateOperationCallback callback);
    method public com.mapbox.common.Cancelable removeFeatureState(String sourceId, String featureId, com.mapbox.maps.FeatureStateOperationCallback callback);
    method @Deprecated public void removeOnCameraChangeListener(com.mapbox.maps.plugin.delegates.listeners.OnCameraChangeListener onCameraChangeListener);
    method @Deprecated public void removeOnMapIdleListener(com.mapbox.maps.plugin.delegates.listeners.OnMapIdleListener onMapIdleListener);
    method @Deprecated public void removeOnMapLoadErrorListener(com.mapbox.maps.plugin.delegates.listeners.OnMapLoadErrorListener onMapLoadErrorListener);
    method @Deprecated public void removeOnMapLoadedListener(com.mapbox.maps.plugin.delegates.listeners.OnMapLoadedListener onMapLoadedListener);
    method @Deprecated public void removeOnRenderFrameFinishedListener(com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameFinishedListener onRenderFrameFinishedListener);
    method @Deprecated public void removeOnRenderFrameStartedListener(com.mapbox.maps.plugin.delegates.listeners.OnRenderFrameStartedListener onRenderFrameStartedListener);
    method @Deprecated public void removeOnSourceAddedListener(com.mapbox.maps.plugin.delegates.listeners.OnSourceAddedListener onSourceAddedListener);
    method @Deprecated public void removeOnSourceDataLoadedListener(com.mapbox.maps.plugin.delegates.listeners.OnSourceDataLoadedListener onSourceDataLoadedListener);
    method @Deprecated public void removeOnSourceRemovedListener(com.mapbox.maps.plugin.delegates.listeners.OnSourceRemovedListener onSourceRemovedListener);
    method @Deprecated public void removeOnStyleDataLoadedListener(com.mapbox.maps.plugin.delegates.listeners.OnStyleDataLoadedListener onStyleDataLoadedListener);
    method @Deprecated public void removeOnStyleImageMissingListener(com.mapbox.maps.plugin.delegates.listeners.OnStyleImageMissingListener onStyleImageMissingListener);
    method @Deprecated public void removeOnStyleImageUnusedListener(com.mapbox.maps.plugin.delegates.listeners.OnStyleImageUnusedListener onStyleImageUnusedListener);
    method @Deprecated public void removeOnStyleLoadedListener(com.mapbox.maps.plugin.delegates.listeners.OnStyleLoadedListener onStyleLoadedListener);
    method @com.mapbox.maps.MapboxExperimental public void removeStyleModel(String modelId);
    method public com.mapbox.common.Cancelable resetFeatureStates(String sourceId, String? sourceLayerId = null, com.mapbox.maps.FeatureStateOperationCallback callback);
    method public com.mapbox.common.Cancelable resetFeatureStates(String sourceId, com.mapbox.maps.FeatureStateOperationCallback callback);
    method public com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.bindgen.None> setBounds(com.mapbox.maps.CameraBoundsOptions options);
    method public void setCamera(com.mapbox.maps.CameraOptions cameraOptions);
    method public void setCamera(com.mapbox.maps.FreeCameraOptions freeCameraOptions);
    method public void setConstrainMode(com.mapbox.maps.ConstrainMode constrainMode);
    method public void setDebug(java.util.List<? extends com.mapbox.maps.MapDebugOptions> debugOptions, boolean enabled);
    method public com.mapbox.common.Cancelable setFeatureState(String sourceId, String? sourceLayerId = null, String featureId, com.mapbox.bindgen.Value state, com.mapbox.maps.FeatureStateOperationCallback callback);
    method public com.mapbox.common.Cancelable setFeatureState(String sourceId, String featureId, com.mapbox.bindgen.Value state, com.mapbox.maps.FeatureStateOperationCallback callback);
    method public void setGestureInProgress(boolean inProgress);
    method public void setNorthOrientation(com.mapbox.maps.NorthOrientation northOrientation);
    method public void setPrefetchZoomDelta(byte delta);
    method public void setRenderWorldCopies(boolean renderWorldCopies);
    method public void setTileCacheBudget(com.mapbox.maps.TileCacheBudget? tileCacheBudget);
    method public void setUserAnimationInProgress(boolean inProgress);
    method public void setViewportMode(com.mapbox.maps.ViewportMode viewportMode);
    method public com.mapbox.common.Cancelable subscribeCameraChanged(com.mapbox.maps.CameraChangedCallback cameraChangedCallback);
    method @com.mapbox.maps.MapboxExperimental public com.mapbox.common.Cancelable subscribeGenericEvent(String eventName, com.mapbox.maps.GenericEventCallback genericEventCallback);
    method public com.mapbox.common.Cancelable subscribeMapIdle(com.mapbox.maps.MapIdleCallback mapIdleCallback);
    method public com.mapbox.common.Cancelable subscribeMapLoaded(com.mapbox.maps.MapLoadedCallback mapLoadedCallback);
    method public com.mapbox.common.Cancelable subscribeMapLoadingError(com.mapbox.maps.MapLoadingErrorCallback mapLoadingErrorCallback);
    method public com.mapbox.common.Cancelable subscribeRenderFrameFinished(com.mapbox.maps.RenderFrameFinishedCallback renderFrameFinishedCallback);
    method public com.mapbox.common.Cancelable subscribeRenderFrameStarted(com.mapbox.maps.RenderFrameStartedCallback renderFrameStartedCallback);
    method public com.mapbox.common.Cancelable subscribeResourceRequest(com.mapbox.maps.ResourceRequestCallback resourceRequestCallback);
    method public com.mapbox.common.Cancelable subscribeSourceAdded(com.mapbox.maps.SourceAddedCallback sourceAddedCallback);
    method public com.mapbox.common.Cancelable subscribeSourceDataLoaded(com.mapbox.maps.SourceDataLoadedCallback sourceDataLoadedCallback);
    method public com.mapbox.common.Cancelable subscribeSourceRemoved(com.mapbox.maps.SourceRemovedCallback sourceRemovedCallback);
    method public com.mapbox.common.Cancelable subscribeStyleDataLoaded(com.mapbox.maps.StyleDataLoadedCallback styleDataLoadedCallback);
    method public com.mapbox.common.Cancelable subscribeStyleImageMissing(com.mapbox.maps.StyleImageMissingCallback styleImageMissingCallback);
    method public com.mapbox.common.Cancelable subscribeStyleImageUnused(com.mapbox.maps.StyleImageRemoveUnusedCallback styleImageRemoveUnusedCallback);
    method public com.mapbox.common.Cancelable subscribeStyleLoaded(com.mapbox.maps.StyleLoadedCallback styleLoadedCallback);
    method @com.mapbox.maps.MapboxExperimental public java.util.List<com.mapbox.maps.CanonicalTileID> tileCover(com.mapbox.maps.TileCoverOptions tileCoverOptions, com.mapbox.maps.CameraOptions? cameraOptions);
    method public void triggerRepaint();
    method public com.mapbox.geojson.Point unproject(com.mapbox.maps.MercatorCoordinate coordinate, double zoomScale);
    property public com.mapbox.maps.CameraState cameraState;
    field public static final com.mapbox.maps.MapboxMap.Companion Companion;
  }

  public static final class MapboxMap.Companion {
    method public void clearData(com.mapbox.maps.AsyncOperationResultCallback callback);
  }

  public final class MapboxMapsOptions {
    method public static String getBaseUrl();
    method public static String getDataPath();
    method public static com.mapbox.common.TileStore? getTileStore();
    method public static com.mapbox.maps.TileStoreUsageMode getTileStoreUsageMode();
    method public static void setBaseUrl(String);
    method public static void setDataPath(String);
    method public static void setTileStore(com.mapbox.common.TileStore?);
    method public static void setTileStoreUsageMode(com.mapbox.maps.TileStoreUsageMode);
    property public static final String baseUrl;
    property public static final String dataPath;
    property public static final com.mapbox.common.TileStore? tileStore;
    property public static final com.mapbox.maps.TileStoreUsageMode tileStoreUsageMode;
    field public static final com.mapbox.maps.MapboxMapsOptions INSTANCE;
  }

  public final class MapboxMapsOptionsKt {
  }

  public final class MapboxTracing {
    method public void disableAll();
    method public void enableAll();
    method public void enableCore();
    method public void enablePlatform();
    field public static final com.mapbox.maps.MapboxTracing INSTANCE;
  }

  public fun interface SnapshotCreatedListener {
    method public void onSnapshotResult(com.mapbox.maps.MapSnapshotResult? snapshot);
  }

  public final class SnapshotOverlayOptions {
    ctor public SnapshotOverlayOptions(boolean showLogo = true, boolean showAttributes = true);
    ctor public SnapshotOverlayOptions(boolean showLogo = true);
    ctor public SnapshotOverlayOptions();
    method public boolean component1();
    method public boolean component2();
    method public com.mapbox.maps.SnapshotOverlayOptions copy(boolean showLogo, boolean showAttributes);
    method public boolean getShowAttributes();
    method public boolean getShowLogo();
    property public final boolean showAttributes;
    property public final boolean showLogo;
  }

  public interface SnapshotStyleListener {
    method public default void onDidFailLoadingStyle(String message);
    method public void onDidFinishLoadingStyle(com.mapbox.maps.Style style);
    method public default void onDidFullyLoadStyle(com.mapbox.maps.Style style);
    method public default void onStyleImageMissing(String imageId);
  }

  public class Snapshotter {
    ctor public Snapshotter(android.content.Context context, com.mapbox.maps.MapSnapshotOptions options, com.mapbox.maps.SnapshotOverlayOptions overlayOptions = com.mapbox.maps.SnapshotOverlayOptions());
    ctor public Snapshotter(android.content.Context context, com.mapbox.maps.MapSnapshotOptions options);
    method public final com.mapbox.maps.CameraOptions cameraForCoordinates(java.util.List<com.mapbox.geojson.Point> coordinates, com.mapbox.maps.EdgeInsets padding, double bearing, double pitch);
    method public final void cancel();
    method public static final void clearData(com.mapbox.maps.AsyncOperationResultCallback callback);
    method public final com.mapbox.maps.CoordinateBounds coordinateBoundsForCamera(com.mapbox.maps.CameraOptions options);
    method public final void destroy();
    method public final com.mapbox.maps.CameraState getCameraState();
    method public final com.mapbox.maps.Size getSize();
    method public final String getStyleJson();
    method public final String getStyleUri();
    method public final void setCamera(com.mapbox.maps.CameraOptions cameraOptions);
    method public final void setSize(com.mapbox.maps.Size size);
    method public final void setStyleJson(String styleJson);
    method public final void setStyleListener(com.mapbox.maps.SnapshotStyleListener listener);
    method public final void setStyleUri(String styleUri);
    method public final void start(com.mapbox.maps.SnapshotCreatedListener callback);
    method @com.mapbox.maps.MapboxExperimental public final java.util.List<com.mapbox.maps.CanonicalTileID> tileCover(com.mapbox.maps.TileCoverOptions tileCoverOptions, com.mapbox.maps.CameraOptions? cameraOptions);
    field public static final com.mapbox.maps.Snapshotter.Companion Companion;
  }

  public static final class Snapshotter.Companion {
    method public void clearData(com.mapbox.maps.AsyncOperationResultCallback callback);
  }

  public final class UtilsKt {
  }

}

package com.mapbox.maps.attribution {

  public final class AttributionLayout {
    ctor public AttributionLayout(android.graphics.Bitmap? logo, android.graphics.PointF? anchorPoint, boolean isShortText);
    method public android.graphics.Bitmap? component1();
    method public android.graphics.PointF? component2();
    method public boolean component3();
    method public com.mapbox.maps.attribution.AttributionLayout copy(android.graphics.Bitmap? logo, android.graphics.PointF? anchorPoint, boolean isShortText);
    method public android.graphics.PointF? getAnchorPoint();
    method public android.graphics.Bitmap? getLogo();
    method public boolean isShortText();
    property public final android.graphics.PointF? anchorPoint;
    property public final boolean isShortText;
    property public final android.graphics.Bitmap? logo;
  }

  public final class AttributionMeasure {
    method public android.widget.TextView getTextView();
    method public com.mapbox.maps.attribution.AttributionLayout? measure();
    field public static final com.mapbox.maps.attribution.AttributionMeasure.Companion Companion;
  }

  public static final class AttributionMeasure.Companion {
  }

  public class AttributionParser {
    method public final String createAttributionString(boolean shortenedOutput = false);
    method public final String createAttributionString();
    method public final java.util.Set<com.mapbox.maps.plugin.attribution.Attribution> getAttributions();
    method protected final void parse();
    field public static final com.mapbox.maps.attribution.AttributionParser.Companion Companion;
  }

  public static final class AttributionParser.Companion {
    method public java.util.List<java.lang.String> getIMPROVE_MAP_URLS();
    property public final java.util.List<java.lang.String> IMPROVE_MAP_URLS;
  }

  public static final class AttributionParser.Options {
    ctor public AttributionParser.Options(android.content.Context context);
    method public com.mapbox.maps.attribution.AttributionParser build();
    method public com.mapbox.maps.attribution.AttributionParser.Options withAttributionData(java.lang.String... attributionData);
    method public com.mapbox.maps.attribution.AttributionParser.Options withCopyrightSign(boolean withCopyrightSign);
    method public com.mapbox.maps.attribution.AttributionParser.Options withImproveMap(boolean withImproveMap);
    method public com.mapbox.maps.attribution.AttributionParser.Options withMapboxAttribution(boolean withMapboxAttribution);
    method public com.mapbox.maps.attribution.AttributionParser.Options withTelemetryAttribution(boolean withTelemetryAttribution);
    field public static final String HTML_STYLE_REGEX = "<(\"[^\"]*\"|\'[^\']*\'|[^\'\">])*>";
  }

}

package com.mapbox.maps.coroutine {

  public final class MapboxMapExtKt {
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.maps.Style! awaitLoadStyle(com.mapbox.maps.MapboxMap, com.mapbox.maps.extension.style.StyleContract.StyleExtension styleExtension);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.maps.Style! awaitLoadStyle(com.mapbox.maps.MapboxMap, String style);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.maps.Style! awaitStyle(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.CameraChanged> getCameraChangedEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.bindgen.Value>! getFeatureState(com.mapbox.maps.MapboxMap, String sourceId, String sourceLayerId = null, String featureId);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.maps.FeatureExtensionValue>! getGeoJsonClusterChildren(com.mapbox.maps.MapboxMap, String sourceIdentifier, com.mapbox.geojson.Feature cluster);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.maps.FeatureExtensionValue>! getGeoJsonClusterExpansionZoom(com.mapbox.maps.MapboxMap, String sourceIdentifier, com.mapbox.geojson.Feature cluster);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.maps.FeatureExtensionValue>! getGeoJsonClusterLeaves(com.mapbox.maps.MapboxMap, String sourceIdentifier, com.mapbox.geojson.Feature cluster, long limit, long offset);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapIdle> getMapIdleEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapLoaded> getMapLoadedEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.MapLoadingError> getMapLoadingErrorEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.RenderFrameFinished> getRenderFrameFinishedEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.RenderFrameStarted> getRenderFrameStartedEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.ResourceRequest> getResourceRequestEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceAdded> getSourceAddedEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceDataLoaded> getSourceDataLoadedEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.SourceRemoved> getSourceRemovedEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleDataLoaded> getStyleDataLoadedEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleImageMissing> getStyleImageMissingEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleImageRemoveUnused> getStyleImageRemoveUnusedEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static kotlinx.coroutines.flow.Flow<com.mapbox.maps.StyleLoaded> getStyleLoadedEvents(com.mapbox.maps.MapboxMap);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.bindgen.Expected<java.lang.String,java.util.List<? extends com.mapbox.maps.QueriedRenderedFeature>>! queryRenderedFeatures(com.mapbox.maps.MapboxMap, com.mapbox.maps.RenderedQueryGeometry geometry, com.mapbox.maps.RenderedQueryOptions options);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.bindgen.Expected<java.lang.String,java.util.List<? extends com.mapbox.maps.QueriedSourceFeature>>! querySourceFeatures(com.mapbox.maps.MapboxMap, String sourceId, com.mapbox.maps.SourceQueryOptions options);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.bindgen.None>! removeFeatureState(com.mapbox.maps.MapboxMap, String sourceId, String sourceLayerId = null, String featureId, String stateKey = null);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.bindgen.None>! resetFeatureStates(com.mapbox.maps.MapboxMap, String sourceId, String sourceLayerId = null);
    method @kotlin.jvm.JvmSynthetic public static suspend com.mapbox.bindgen.Expected<java.lang.String,com.mapbox.bindgen.None>! setFeatureState(com.mapbox.maps.MapboxMap, String sourceId, String sourceLayerId = null, String featureId, com.mapbox.bindgen.Value state);
  }

}

package com.mapbox.maps.plugin {

  public final class InvalidViewPluginHostException extends java.lang.Exception {
    ctor public InvalidViewPluginHostException(String message);
  }

}

package com.mapbox.maps.renderer {

  public fun interface OnFpsChangedListener {
    method @WorkerThread public void onFpsChanged(double fps);
  }

  public final class RendererError {
    ctor public RendererError(int eglErrorCode);
    method public int getEglErrorCode();
    property public final int eglErrorCode;
    field public static final com.mapbox.maps.renderer.RendererError.Companion Companion;
    field public static final com.mapbox.maps.renderer.RendererError NO_VALID_EGL_CONFIG_FOUND;
    field public static final com.mapbox.maps.renderer.RendererError OUT_OF_MEMORY;
  }

  public static final class RendererError.Companion {
  }

  public fun interface RendererSetupErrorListener {
    method public void onError(com.mapbox.maps.renderer.RendererError error);
  }

}

package com.mapbox.maps.renderer.widget {

  @com.mapbox.maps.MapboxExperimental public class BitmapWidget extends com.mapbox.maps.renderer.widget.Widget {
    ctor public BitmapWidget(android.graphics.Bitmap bitmap, com.mapbox.maps.renderer.widget.WidgetPosition originalPosition = WidgetPosition({ 
    verticalAlignment = WidgetPosition.Vertical.TOP
    horizontalAlignment = WidgetPosition.Horizontal.LEFT
    offsetX = 0.0
    offsetY = 0.0
}));
    ctor public BitmapWidget(android.graphics.Bitmap bitmap);
    ctor @Deprecated public BitmapWidget(android.graphics.Bitmap bitmap, com.mapbox.maps.renderer.widget.WidgetPosition position = com.mapbox.maps.renderer.widget.WidgetPosition(com.mapbox.maps.renderer.widget.WidgetPosition.Vertical.TOP, com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal.LEFT), float marginX = 0f, float marginY = 0f);
    ctor @Deprecated public BitmapWidget(android.graphics.Bitmap bitmap, com.mapbox.maps.renderer.widget.WidgetPosition position = com.mapbox.maps.renderer.widget.WidgetPosition(com.mapbox.maps.renderer.widget.WidgetPosition.Vertical.TOP, com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal.LEFT), float marginX = 0f);
    method public com.mapbox.maps.renderer.widget.WidgetPosition getPosition();
    method public float getRotation();
    method public void setPosition(com.mapbox.maps.renderer.widget.WidgetPosition widgetPosition);
    method public void setRotation(float angleDegrees);
    method @Deprecated public void setTranslation(float translateX, float translateY);
    method public final void updateBitmap(android.graphics.Bitmap bitmap);
  }

  @com.mapbox.maps.MapboxExperimental public abstract class Widget {
    method public abstract com.mapbox.maps.renderer.widget.WidgetPosition getPosition();
    method public abstract float getRotation();
    method public abstract void setPosition(com.mapbox.maps.renderer.widget.WidgetPosition widgetPosition);
    method public abstract void setRotation(float angleDegrees);
    method @Deprecated public abstract void setTranslation(float translateX, float translateY);
  }

  @com.mapbox.maps.MapboxExperimental public final class WidgetPosition {
    ctor @Deprecated public WidgetPosition(com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal horizontal, com.mapbox.maps.renderer.widget.WidgetPosition.Vertical vertical);
    method @Deprecated public com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal getHorizontal();
    method public com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal getHorizontalAlignment();
    method public float getOffsetX();
    method public float getOffsetY();
    method @Deprecated public com.mapbox.maps.renderer.widget.WidgetPosition.Vertical getVertical();
    method public com.mapbox.maps.renderer.widget.WidgetPosition.Vertical getVerticalAlignment();
    method public com.mapbox.maps.renderer.widget.WidgetPosition.Builder toBuilder();
    property @Deprecated public final com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal horizontal;
    property public final com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal horizontalAlignment;
    property public final float offsetX;
    property public final float offsetY;
    property @Deprecated public final com.mapbox.maps.renderer.widget.WidgetPosition.Vertical vertical;
    property public final com.mapbox.maps.renderer.widget.WidgetPosition.Vertical verticalAlignment;
  }

  public static final class WidgetPosition.Builder {
    ctor public WidgetPosition.Builder();
    method public com.mapbox.maps.renderer.widget.WidgetPosition build();
    method public com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal getHorizontalAlignment();
    method public float getOffsetX();
    method public float getOffsetY();
    method public com.mapbox.maps.renderer.widget.WidgetPosition.Vertical getVerticalAlignment();
    method public com.mapbox.maps.renderer.widget.WidgetPosition.Builder setHorizontalAlignment(com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal horizontalAlignment);
    method public com.mapbox.maps.renderer.widget.WidgetPosition.Builder setOffsetX(float offsetX);
    method public com.mapbox.maps.renderer.widget.WidgetPosition.Builder setOffsetY(float offsetY);
    method public com.mapbox.maps.renderer.widget.WidgetPosition.Builder setVerticalAlignment(com.mapbox.maps.renderer.widget.WidgetPosition.Vertical verticalAlignment);
    property public final com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal horizontalAlignment;
    property public final float offsetX;
    property public final float offsetY;
    property public final com.mapbox.maps.renderer.widget.WidgetPosition.Vertical verticalAlignment;
  }

  public enum WidgetPosition.Horizontal {
    enum_constant public static final com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal CENTER;
    enum_constant public static final com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal LEFT;
    enum_constant public static final com.mapbox.maps.renderer.widget.WidgetPosition.Horizontal RIGHT;
  }

  public enum WidgetPosition.Vertical {
    enum_constant public static final com.mapbox.maps.renderer.widget.WidgetPosition.Vertical BOTTOM;
    enum_constant public static final com.mapbox.maps.renderer.widget.WidgetPosition.Vertical CENTER;
    enum_constant public static final com.mapbox.maps.renderer.widget.WidgetPosition.Vertical TOP;
  }

  public final class WidgetPositionKt {
    method @com.mapbox.maps.MapboxExperimental @kotlin.jvm.JvmSynthetic public static com.mapbox.maps.renderer.widget.WidgetPosition! WidgetPosition(kotlin.jvm.functions.Function1<? super com.mapbox.maps.renderer.widget.WidgetPosition.Builder,? extends kotlin.Unit> initializer);
  }

}

package com.mapbox.maps.viewannotation {

  public interface OnViewAnnotationUpdatedListener {
    method public void onViewAnnotationPositionUpdated(android.view.View view, com.mapbox.maps.ScreenCoordinate leftTopCoordinate, int width, int height);
    method public void onViewAnnotationVisibilityUpdated(android.view.View view, boolean visible);
  }

  public interface ViewAnnotationManager {
    method public void addOnViewAnnotationUpdatedListener(com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener listener);
    method public android.view.View addViewAnnotation(@LayoutRes int resId, com.mapbox.maps.ViewAnnotationOptions options);
    method public void addViewAnnotation(@LayoutRes int resId, com.mapbox.maps.ViewAnnotationOptions options, androidx.asynclayoutinflater.view.AsyncLayoutInflater asyncInflater, kotlin.jvm.functions.Function1<? super android.view.View,kotlin.Unit> asyncInflateCallback);
    method public void addViewAnnotation(android.view.View view, com.mapbox.maps.ViewAnnotationOptions options);
    method public com.mapbox.maps.CameraOptions? cameraForAnnotations(java.util.List<? extends android.view.View> annotations, com.mapbox.maps.EdgeInsets? edgeInsets = null, Double? bearing = null, Double? pitch = null);
    method public java.util.Map<android.view.View,com.mapbox.maps.ViewAnnotationOptions> getAnnotations();
    method public android.view.View? getViewAnnotationByFeatureId(String featureId);
    method public com.mapbox.maps.ViewAnnotationOptions? getViewAnnotationOptionsByFeatureId(String featureId);
    method public com.mapbox.maps.ViewAnnotationOptions? getViewAnnotationOptionsByView(android.view.View view);
    method public com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode getViewAnnotationUpdateMode();
    method public void removeAllViewAnnotations();
    method public void removeOnViewAnnotationUpdatedListener(com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener listener);
    method public boolean removeViewAnnotation(android.view.View view);
    method public void setViewAnnotationUpdateMode(com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode mode);
    method public boolean updateViewAnnotation(android.view.View view, com.mapbox.maps.ViewAnnotationOptions options);
    property public abstract java.util.Map<android.view.View,com.mapbox.maps.ViewAnnotationOptions> annotations;
    field public static final com.mapbox.maps.viewannotation.ViewAnnotationManager.Companion Companion;
    field public static final com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode DEFAULT_UPDATE_MODE;
  }

  public static final class ViewAnnotationManager.Companion {
  }

  public final class ViewAnnotationOptionsKtxKt {
    method public static inline com.mapbox.maps.ViewAnnotationOptions viewAnnotationOptions(kotlin.jvm.functions.Function1<? super com.mapbox.maps.ViewAnnotationOptions.Builder,kotlin.Unit> block);
  }

  public final class ViewAnnotationUpdateMode {
    field public static final com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode.Companion Companion;
    field public static final com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode MAP_FIXED_DELAY;
    field public static final com.mapbox.maps.viewannotation.ViewAnnotationUpdateMode MAP_SYNCHRONIZED;
  }

  public static final class ViewAnnotationUpdateMode.Companion {
  }

}

