apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply from: "${rootDir}/gradle/metalava.gradle"

tasks.register("updateApiMetalava") {
    group = "Other"
    description = "Update metalava generated public api files for all variants."
}

tasks.register("checkApiMetalava") {
    group = "Other"
    description = "Update metalava generated public api files for all variants."
}

android.libraryVariants.all { variant ->
    // TODO eliminate variants https://issuetracker.google.com/issues/62201427
    if (variant.buildType.isDebuggable()) {
        return
    }
    def variantName = variant.name.capitalize()
    def sources = variant.getSourceSets()

    tasks.register("update${variantName}ApiMetalava", JavaExec) {
        group = 'Other'
        description = "Update metalava generated public api files for $variantName variant."
        dependsOn "assemble$variantName"

        sources.each {
            it.kotlinDirectories.each { dir ->
                // We will use `inputs` later for Metalava `source-path` and it doesn't like if the folder doesn't exist.
                // So we filter it here
                if (dir.exists()) {
                    inputs.files(dir)
                }
            }
        }

        def outputFileName = "api/${variantName}/metalava.txt"
        outputs.file(outputFileName)

        classpath = configurations.metalava
        mainClass.set("com.android.tools.metalava.Driver")

        doFirst {
            def metalavaClasspath = (project.files(android.getBootClasspath()) + variant.javaCompile.classpath).join(File.pathSeparator)
            args = [
                    '--no-banner',
                    '--source-path', inputs.getFiles().getAsPath(),
                    '--compatible-output=no',
                    '--omit-common-packages=yes',
                    '--output-kotlin-nulls=yes',
                    '--hide', 'HiddenSuperclass',
                    '--hide', 'DeprecationMismatch',
                    '--classpath', metalavaClasspath,
                    '--api', outputFileName
            ]
            if (project.hasProperty('hidePackage')) {
                args += '--hide-package'
                args += hidePackage
            }
            if (project.hasProperty('hideId')) {
                args += '--hide'
                args += hideId
            }
        }
    }

    tasks.named("updateApiMetalava") { dependsOn("update${variantName}ApiMetalava") }

    tasks.register("check${variantName}ApiMetalava", JavaExec) {
        group = "Verification"
        description = "Checks signatures of public API against the golden value in API folder generated by metalava for $variantName variant."
        dependsOn "assemble$variantName"

        sources.each {
            it.kotlinDirectories.each { dir ->
                // We will use `inputs` later for Metalava `source-path` and it doesn't like if the folder doesn't exist.
                // So we filter it here
                if (dir.exists()) {
                    inputs.files(dir)
                }
            }
        }

        // Copy the input source files before adding the variantMetalavaFilePath
        def inputDir = inputs.getFiles().getAsPath()

        def variantMetalavaFilePath = "api/${variantName}/metalava.txt"
        inputs.file(variantMetalavaFilePath)
        outputs.file(variantMetalavaFilePath)

        classpath = configurations.metalava
        mainClass.set("com.android.tools.metalava.Driver")

        doFirst {
            def metalavaClasspath = (project.files(android.getBootClasspath()) + variant.javaCompile.classpath).join(File.pathSeparator)
            args = [
                    '--no-banner',
                    '--source-path', inputDir,
                    '--compatible-output=no',
                    '--omit-common-packages=yes',
                    '--output-kotlin-nulls=yes',
                    '--input-kotlin-nulls=yes',
                    '--hide', 'HiddenSuperclass',
                    '--hide', 'DeprecationMismatch',
                    '--classpath', metalavaClasspath,
                    '--check-compatibility:api:current', variantMetalavaFilePath
            ]
            if (project.hasProperty('hidePackage')) {
                args += '--hide-package'
                args += hidePackage
            }
            if (project.hasProperty('hideId')) {
                args += '--hide'
                args += hideId
            }
        }
    }

    tasks.named("checkApiMetalava") { dependsOn("check${variantName}ApiMetalava") }
}

/*
Kotlin validator is disabled due to not being compatible with flavors: https://github.com/Kotlin/binary-compatibility-validator/issues/24
tasks.register("checkApiKotlinValidator") {
    dependsOn("apiCheck")
    group = 'Verification'
    description = 'Checks signatures of public API against the golden value in API folder generated by Kotlin binary compatibility validator.'
}

tasks.register("updateApiKotlinValidator") {
    dependsOn("apiDump")
    group = 'Other'
    description = 'Update Kotlin binary compatibility validator generated public api files.'
}
*/

tasks.register("checkApi") {
    dependsOn checkApiMetalava
//    dependsOn checkApiKotlinValidator
    group = 'Verification'
    description = 'Checks signatures of public API against the golden value in API folder generated by Metalava (Note: Kotlin binary compatibility validator is disabled).'
}

tasks.register("updateApi") {
    dependsOn updateApiMetalava
//    dependsOn updateApiKotlinValidator
    group = 'Other'
    description = 'Update generated public api files from Metalava (Note: Kotlin binary compatibility validator is disabled).'
}
