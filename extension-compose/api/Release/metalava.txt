// Signature format: 3.0
package com.mapbox.maps.extension.compose {

  @com.mapbox.maps.MapboxExperimental public final class DefaultSettingsProvider {
    method @com.mapbox.maps.MapboxExperimental public com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings defaultLocationComponentSettings(android.content.Context context, float pixelRatio = android.util.DisplayMetrics.density);
    method @com.mapbox.maps.MapboxExperimental public com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings defaultLocationComponentSettings(android.content.Context context);
    method public com.mapbox.maps.plugin.gestures.OnMapClickListener getDefaultOnClickListener();
    method public com.mapbox.maps.plugin.gestures.OnMapLongClickListener getDefaultOnLongClickListener();
    property public final com.mapbox.maps.plugin.gestures.OnMapClickListener defaultOnClickListener;
    property public final com.mapbox.maps.plugin.gestures.OnMapLongClickListener defaultOnLongClickListener;
    field public static final com.mapbox.maps.extension.compose.DefaultSettingsProvider INSTANCE;
  }

  public final class DisposableMapEffectKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, Object? key2, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object? key1, Object? key2, Object? key3, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void DisposableMapEffect(Object![]? keys, kotlin.jvm.functions.Function2<? super androidx.compose.runtime.DisposableEffectScope,? super com.mapbox.maps.MapView,? extends androidx.compose.runtime.DisposableEffectResult> block);
  }

  public final class MapEffectKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, Object? key2, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object? key1, Object? key2, Object? key3, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void MapEffect(Object![]? keys, kotlin.jvm.functions.Function3<? super kotlinx.coroutines.CoroutineScope,? super com.mapbox.maps.MapView,? super kotlin.coroutines.Continuation<? super kotlin.Unit>,?> block);
  }

  @com.mapbox.maps.MapboxExperimental public final class MapEvents {
    ctor public MapEvents(com.mapbox.maps.MapLoadedCallback? onMapLoaded = null, com.mapbox.maps.MapIdleCallback? onMapIdle = null, com.mapbox.maps.MapLoadingErrorCallback? onMapLoadingError = null, com.mapbox.maps.StyleLoadedCallback? onStyleLoaded = null, com.mapbox.maps.StyleDataLoadedCallback? onStyleDataLoaded = null, com.mapbox.maps.SourceDataLoadedCallback? onSourceDataLoaded = null, com.mapbox.maps.SourceAddedCallback? onSourceAdded = null, com.mapbox.maps.SourceRemovedCallback? onSourceRemoved = null, com.mapbox.maps.StyleImageMissingCallback? onStyleImageMissing = null, com.mapbox.maps.StyleImageRemoveUnusedCallback? onStyleImageRemoveUnused = null, com.mapbox.maps.CameraChangedCallback? onCameraChanged = null, com.mapbox.maps.RenderFrameStartedCallback? onRenderFrameStarted = null, com.mapbox.maps.RenderFrameFinishedCallback? onRenderFrameFinished = null, com.mapbox.maps.ResourceRequestCallback? onResourceRequest = null);
    method public com.mapbox.maps.CameraChangedCallback? getOnCameraChanged();
    method public com.mapbox.maps.MapIdleCallback? getOnMapIdle();
    method public com.mapbox.maps.MapLoadedCallback? getOnMapLoaded();
    method public com.mapbox.maps.MapLoadingErrorCallback? getOnMapLoadingError();
    method public com.mapbox.maps.RenderFrameFinishedCallback? getOnRenderFrameFinished();
    method public com.mapbox.maps.RenderFrameStartedCallback? getOnRenderFrameStarted();
    method public com.mapbox.maps.ResourceRequestCallback? getOnResourceRequest();
    method public com.mapbox.maps.SourceAddedCallback? getOnSourceAdded();
    method public com.mapbox.maps.SourceDataLoadedCallback? getOnSourceDataLoaded();
    method public com.mapbox.maps.SourceRemovedCallback? getOnSourceRemoved();
    method public com.mapbox.maps.StyleDataLoadedCallback? getOnStyleDataLoaded();
    method public com.mapbox.maps.StyleImageMissingCallback? getOnStyleImageMissing();
    method public com.mapbox.maps.StyleImageRemoveUnusedCallback? getOnStyleImageRemoveUnused();
    method public com.mapbox.maps.StyleLoadedCallback? getOnStyleLoaded();
    property public final com.mapbox.maps.CameraChangedCallback? onCameraChanged;
    property public final com.mapbox.maps.MapIdleCallback? onMapIdle;
    property public final com.mapbox.maps.MapLoadedCallback? onMapLoaded;
    property public final com.mapbox.maps.MapLoadingErrorCallback? onMapLoadingError;
    property public final com.mapbox.maps.RenderFrameFinishedCallback? onRenderFrameFinished;
    property public final com.mapbox.maps.RenderFrameStartedCallback? onRenderFrameStarted;
    property public final com.mapbox.maps.ResourceRequestCallback? onResourceRequest;
    property public final com.mapbox.maps.SourceAddedCallback? onSourceAdded;
    property public final com.mapbox.maps.SourceDataLoadedCallback? onSourceDataLoaded;
    property public final com.mapbox.maps.SourceRemovedCallback? onSourceRemoved;
    property public final com.mapbox.maps.StyleDataLoadedCallback? onStyleDataLoaded;
    property public final com.mapbox.maps.StyleImageMissingCallback? onStyleImageMissing;
    property public final com.mapbox.maps.StyleImageRemoveUnusedCallback? onStyleImageRemoveUnused;
    property public final com.mapbox.maps.StyleLoadedCallback? onStyleLoaded;
  }

  @androidx.compose.runtime.ComposableTargetMarker(description="Mapbox Map Composable") @com.mapbox.maps.MapboxExperimental @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention.BINARY) @kotlin.annotation.Target(allowedTargets={kotlin.annotation.AnnotationTarget.FILE, kotlin.annotation.AnnotationTarget.FUNCTION, kotlin.annotation.AnnotationTarget.PROPERTY_GETTER, kotlin.annotation.AnnotationTarget.TYPE, kotlin.annotation.AnnotationTarget.TYPE_PARAMETER}) public @interface MapboxMapComposable {
  }

  public final class MapboxMapKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static void MapboxMap(androidx.compose.ui.Modifier modifier = Modifier, com.mapbox.maps.extension.compose.MapEvents? mapEvents = null, kotlin.jvm.functions.Function1<? super android.content.Context,com.mapbox.maps.MapInitOptions> mapInitOptionsFactory = { context -> return <init>(context) }, com.mapbox.maps.plugin.gestures.generated.GesturesSettings gesturesSettings = GesturesSettings({ 

}), com.mapbox.maps.plugin.locationcomponent.generated.LocationComponentSettings locationComponentSettings = DefaultSettingsProvider.defaultLocationComponentSettings(LocalContext.current), kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.compass.MapCompassScope,kotlin.Unit> compass = { Compass() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.scalebar.MapScaleBarScope,kotlin.Unit> scaleBar = { ScaleBar() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.logo.MapLogoScope,kotlin.Unit> logo = { Logo() }, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.ornaments.attribution.MapAttributionScope,kotlin.Unit> attribution = { Attribution() }, com.mapbox.maps.extension.compose.animation.viewport.MapViewportState mapViewportState = rememberMapViewportState(), com.mapbox.maps.plugin.gestures.OnMapClickListener onMapClickListener = DefaultSettingsProvider.defaultOnClickListener, com.mapbox.maps.plugin.gestures.OnMapLongClickListener onMapLongClickListener = DefaultSettingsProvider.defaultOnLongClickListener, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.MapboxMapScope,kotlin.Unit>? content = null);
  }

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapboxMapScope {
    field public static final com.mapbox.maps.extension.compose.MapboxMapScope INSTANCE;
  }

  @kotlin.DslMarker public @interface MapboxMapScopeMarker {
  }

}

package com.mapbox.maps.extension.compose.animation.viewport {

  @com.mapbox.maps.MapboxExperimental public final class MapViewportState {
    ctor public MapViewportState(com.mapbox.maps.CameraState cameraState = com.mapbox.maps.extension.compose.animation.viewport.MapViewportState.INIT_CAMERA_STATE);
    method @com.mapbox.maps.MapboxExperimental public void easeTo(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.maps.plugin.animation.MapAnimationOptions? animationOptions = null, com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method @com.mapbox.maps.MapboxExperimental public void flyTo(com.mapbox.maps.CameraOptions cameraOptions, com.mapbox.maps.plugin.animation.MapAnimationOptions? animationOptions = null, com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method public com.mapbox.maps.CameraState getCameraState();
    method public com.mapbox.maps.plugin.viewport.ViewportStatus getMapViewportStatus();
    method public com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason getMapViewportStatusChangedReason();
    method public com.mapbox.maps.CameraOptions? getStyleDefaultCameraOptions();
    method @com.mapbox.maps.MapboxExperimental public void idle();
    method @UiThread @com.mapbox.maps.MapboxExperimental public void setCameraOptions(com.mapbox.maps.CameraOptions cameraOptions);
    method @UiThread @com.mapbox.maps.MapboxExperimental public void setCameraOptions(kotlin.jvm.functions.Function1<? super com.mapbox.maps.CameraOptions.Builder,kotlin.Unit> block);
    method @com.mapbox.maps.MapboxExperimental public void transitionToFollowPuckState(com.mapbox.maps.plugin.viewport.data.FollowPuckViewportStateOptions followPuckViewportStateOptions = FollowPuckViewportStateOptions.<init>().build(), com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions defaultTransitionOptions = DefaultViewportTransitionOptions.<init>().build(), com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    method @com.mapbox.maps.MapboxExperimental public void transitionToOverviewState(com.mapbox.maps.plugin.viewport.data.OverviewViewportStateOptions overviewViewportStateOptions, com.mapbox.maps.plugin.viewport.data.DefaultViewportTransitionOptions defaultTransitionOptions = DefaultViewportTransitionOptions.<init>().build(), com.mapbox.maps.plugin.viewport.CompletionListener? completionListener = null);
    property public final com.mapbox.maps.CameraState cameraState;
    property public final com.mapbox.maps.plugin.viewport.ViewportStatus mapViewportStatus;
    property public final com.mapbox.maps.plugin.viewport.data.ViewportStatusChangeReason mapViewportStatusChangedReason;
    property public final com.mapbox.maps.CameraOptions? styleDefaultCameraOptions;
    field public static final com.mapbox.maps.extension.compose.animation.viewport.MapViewportState.Companion Companion;
  }

  public static final class MapViewportState.Companion {
    method public androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,com.mapbox.maps.CameraState> getSaver();
    property public final androidx.compose.runtime.saveable.Saver<com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,com.mapbox.maps.CameraState> Saver;
  }

  public final class MapViewportStateKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public static inline com.mapbox.maps.extension.compose.animation.viewport.MapViewportState rememberMapViewportState(String? key = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.extension.compose.animation.viewport.MapViewportState,kotlin.Unit> init = {});
  }

}

package com.mapbox.maps.extension.compose.annotation {

  public final class ViewAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void ViewAnnotation(com.mapbox.maps.ViewAnnotationOptions options, androidx.compose.ui.Modifier modifier = Modifier, com.mapbox.maps.viewannotation.OnViewAnnotationUpdatedListener? onUpdatedListener = null, android.view.ViewGroup.LayoutParams layoutParams = ViewGroup.<init>(FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT), kotlin.jvm.functions.Function0<kotlin.Unit> content);
  }

}

package com.mapbox.maps.extension.compose.annotation.generated {

  public final class CircleAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.CircleAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, Double? circleEmissiveStrength = null, com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchAlignment? circlePitchAlignment = null, com.mapbox.maps.extension.style.layers.properties.generated.CirclePitchScale? circlePitchScale = null, java.util.List<java.lang.Double>? circleTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.CircleTranslateAnchor? circleTranslateAnchor = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class CircleAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void CircleAnnotation(com.mapbox.geojson.Point point, Double? circleBlur = null, Integer? circleColorInt = null, String? circleColorString = null, Double? circleOpacity = null, Double? circleRadius = null, Integer? circleStrokeColorInt = null, String? circleStrokeColorString = null, Double? circleStrokeOpacity = null, Double? circleStrokeWidth = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.CircleAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PointAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PointAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PointAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, Boolean? iconAllowOverlap = null, Boolean? iconIgnorePlacement = null, Boolean? iconKeepUpright = null, Boolean? iconOptional = null, Double? iconPadding = null, com.mapbox.maps.extension.style.layers.properties.generated.IconPitchAlignment? iconPitchAlignment = null, com.mapbox.maps.extension.style.layers.properties.generated.IconRotationAlignment? iconRotationAlignment = null, Boolean? symbolAvoidEdges = null, com.mapbox.maps.extension.style.layers.properties.generated.SymbolPlacement? symbolPlacement = null, Double? symbolSpacing = null, Boolean? symbolZElevate = null, com.mapbox.maps.extension.style.layers.properties.generated.SymbolZOrder? symbolZOrder = null, Boolean? textAllowOverlap = null, java.util.List<java.lang.String>? textFont = null, Boolean? textIgnorePlacement = null, Boolean? textKeepUpright = null, Double? textMaxAngle = null, Boolean? textOptional = null, Double? textPadding = null, com.mapbox.maps.extension.style.layers.properties.generated.TextPitchAlignment? textPitchAlignment = null, com.mapbox.maps.extension.style.layers.properties.generated.TextRotationAlignment? textRotationAlignment = null, java.util.List<java.lang.String>? textVariableAnchor = null, java.util.List<java.lang.String>? textWritingMode = null, Double? iconColorSaturation = null, java.util.List<java.lang.Double>? iconTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.IconTranslateAnchor? iconTranslateAnchor = null, java.util.List<java.lang.Double>? textTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.TextTranslateAnchor? textTranslateAnchor = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PointAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PointAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PointAnnotation(com.mapbox.geojson.Point point, android.graphics.Bitmap? iconImageBitmap = null, com.mapbox.maps.extension.style.layers.properties.generated.IconAnchor? iconAnchor = null, String? iconImage = null, java.util.List<java.lang.Double>? iconOffset = null, Double? iconRotate = null, Double? iconSize = null, com.mapbox.maps.extension.style.layers.properties.generated.IconTextFit? iconTextFit = null, java.util.List<java.lang.Double>? iconTextFitPadding = null, com.mapbox.maps.extension.style.layers.properties.generated.TextAnchor? textAnchor = null, String? textField = null, com.mapbox.maps.extension.style.layers.properties.generated.TextJustify? textJustify = null, Double? textLetterSpacing = null, Double? textLineHeight = null, Double? textMaxWidth = null, java.util.List<java.lang.Double>? textOffset = null, Double? textRadialOffset = null, Double? textRotate = null, Double? textSize = null, com.mapbox.maps.extension.style.layers.properties.generated.TextTransform? textTransform = null, Integer? iconColorInt = null, String? iconColorString = null, Double? iconEmissiveStrength = null, Double? iconHaloBlur = null, Integer? iconHaloColorInt = null, String? iconHaloColorString = null, Double? iconHaloWidth = null, Double? iconImageCrossFade = null, Double? iconOpacity = null, Integer? textColorInt = null, String? textColorString = null, Double? textEmissiveStrength = null, Double? textHaloBlur = null, Integer? textHaloColorInt = null, String? textHaloColorString = null, Double? textHaloWidth = null, Double? textOpacity = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PointAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolygonAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolygonAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PolygonAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, Boolean? fillAntialias = null, Double? fillEmissiveStrength = null, java.util.List<java.lang.Double>? fillTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.FillTranslateAnchor? fillTranslateAnchor = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolygonAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolygonAnnotation(java.util.List<? extends java.util.List<com.mapbox.geojson.Point>> points, Integer? fillColorInt = null, String? fillColorString = null, Double? fillOpacity = null, Integer? fillOutlineColorInt = null, String? fillOutlineColorString = null, String? fillPattern = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolygonAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolylineAnnotationGroupKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolylineAnnotationGroup(java.util.List<com.mapbox.maps.plugin.annotation.generated.PolylineAnnotationOptions> annotations, com.mapbox.maps.plugin.annotation.AnnotationConfig? annotationConfig = null, com.mapbox.maps.extension.style.layers.properties.generated.LineCap? lineCap = null, Double? lineMiterLimit = null, Double? lineRoundLimit = null, java.util.List<java.lang.Double>? lineDasharray = null, Double? lineDepthOcclusionFactor = null, Double? lineEmissiveStrength = null, java.util.List<java.lang.Double>? lineTranslate = null, com.mapbox.maps.extension.style.layers.properties.generated.LineTranslateAnchor? lineTranslateAnchor = null, java.util.List<java.lang.Double>? lineTrimOffset = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

  public final class PolylineAnnotationKt {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapComposable public static void PolylineAnnotation(java.util.List<com.mapbox.geojson.Point> points, com.mapbox.maps.extension.style.layers.properties.generated.LineJoin? lineJoin = null, Double? lineBlur = null, Integer? lineBorderColorInt = null, String? lineBorderColorString = null, Double? lineBorderWidth = null, Integer? lineColorInt = null, String? lineColorString = null, Double? lineGapWidth = null, Double? lineOffset = null, Double? lineOpacity = null, String? linePattern = null, Double? lineWidth = null, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.annotation.generated.PolylineAnnotation,java.lang.Boolean> onClick = { it -> return false });
  }

}

package com.mapbox.maps.extension.compose.internal {

  public final class MapApplierKt {
  }

  public final class MapPreviewPlaceholderKt {
  }

  public final class MapViewLifecycleKt {
  }

  public final class MapboxMapNodeKt {
  }

  public final class SettingsUtilsKt {
  }

}

package com.mapbox.maps.extension.compose.ornaments.attribution {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapAttributionScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void Attribution(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.BottomStart, long iconColor = Color(4280192171), kotlin.jvm.functions.Function3<? super java.util.List<com.mapbox.maps.plugin.attribution.Attribution>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.attribution.Attribution,kotlin.Unit>,kotlin.Unit> attributionDialog = { attributions, onDismissRequest, onAttributionClick -> AttributionDialog(attributions, onDismissRequest, onAttributionClick) }, kotlin.jvm.functions.Function4<? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,? super kotlin.jvm.functions.Function0<kotlin.Unit>,kotlin.Unit> telemetryDialog = { onDismissRequest, onMoreInfo, onDisagree, onAgree -> TelemetryDialog(onDismissRequest, onMoreInfo, onDisagree, onAgree) });
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void AttributionDialog(java.util.List<com.mapbox.maps.plugin.attribution.Attribution> attributions, kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function1<? super com.mapbox.maps.plugin.attribution.Attribution,kotlin.Unit> onAttributionClick);
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void TelemetryDialog(kotlin.jvm.functions.Function0<kotlin.Unit> onDismissRequest, kotlin.jvm.functions.Function0<kotlin.Unit> onMoreInfo, kotlin.jvm.functions.Function0<kotlin.Unit> onDisagree, kotlin.jvm.functions.Function0<kotlin.Unit> onAgree);
  }

}

package com.mapbox.maps.extension.compose.ornaments.compass {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapCompassScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void Compass(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.TopEnd, boolean fadeWhenFacingNorth = true, boolean resetToNorthUponClick = true, kotlin.jvm.functions.Function0<kotlin.Unit> content = { Image(painterResource(R.drawable.mapbox_compass_icon), "Mapbox Compass") });
  }

}

package com.mapbox.maps.extension.compose.ornaments.logo {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapLogoScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void Logo(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.BottomStart);
  }

}

package com.mapbox.maps.extension.compose.ornaments.scalebar {

  @androidx.compose.runtime.Immutable @com.mapbox.maps.MapboxExperimental @com.mapbox.maps.extension.compose.MapboxMapScopeMarker public final class MapScaleBarScope {
    method @androidx.compose.runtime.Composable @com.mapbox.maps.MapboxExperimental public void ScaleBar(androidx.compose.ui.Modifier modifier = Modifier, androidx.compose.ui.Alignment alignment = androidx.compose.ui.Alignment.Companion.TopStart, long textColor = Color.Black, long primaryColor = Color.Black, long secondaryColor = Color.White, float borderWidth = 2.dp, float height = 2.dp, float textBarMargin = 8.dp, float textBorderWidth = 2.dp, long textSize = 8.sp, boolean isMetricUnit = true, long refreshInterval = 15.milliseconds, boolean showTextBorder = true, float ratio = 0.5f, boolean useContinuousRendering = false);
  }

}

